import ast
import re
import json
import requests
import asyncio

class ListaAgent:
  def __init__(self, websocket, openai, isAsync):
      print('Inicializando ListaAgent')
      self.websocket = websocket
      self.isAsync = isAsync
      self.id = 0
      self.openai = openai

  def extrair_lista(self, texto):
      """Extrai lista do modelo a partir de um bloco markdown tipo ```lista ... ```"""
      padrao = r'```lista\s*(\[.*?\])\s*```'
      correspondencia = re.search(padrao, texto, re.DOTALL | re.IGNORECASE)

      if correspondencia:
          try:
              return ast.literal_eval(correspondencia.group(1))
          except Exception as e:
              print("Erro ao avaliar lista:", e)
              return None
      return None

  async def handle(self, id, question, contexto, data=None):
    try:
      self.id = id
      full_conversation = "\n\n".join([
         f"""{msg["role"]}: {msg["content"]}""" for msg in contexto
         ])
      print(full_conversation)
      
      prompt = f"""
        # üì¶ Gera√ß√£o de LISTA a partir da Conversa

        ## üéØ Objetivo

        Transformar as informa√ß√µes extra√≠das de uma conversa com o usu√°rio em uma LISTA, respeitando regras espec√≠ficas de convers√£o.

        ---

        ## üìå Regras de Convers√£o

        - **G√™nero**:
          - Masculino ‚Üí `1`
          - Feminino ‚Üí `0`

        - **Para os campos booleanos (sim/n√£o)**, utilize as seguintes regras:
          - Respostas positivas (ex: "sim", "√†s vezes", "j√°", "costumo", "sim, ocasionalmente") ‚Üí `1`
          - Respostas negativas (ex: "n√£o", "nunca", "jamais", "de forma alguma") ‚Üí `0`

        - **Campo "confirmado"**:
          - Se o usu√°rio confirmou explicitamente que as informa√ß√µes est√£o corretas ‚Üí `true`
          - Caso contr√°rio ‚Üí `false`

        ---
        obs:
          -os items que estar√£o na lista s√£o GENDER, AGE, SMOKING, YELLOW_FINGERS, ANXIETY,PEER_PRESSURE, CHRONIC_DISEASE, FATIGUE, ALLERGY, WHEEZING,ALCOHOL_CONSUMING, COUGHING, SHORTNESS_OF_BREATH,SWALLOWING_DIFFICULTY, CHEST_PAIN

        ## üßæ Formato da lista Esperado

        ```lista
        [1, 22, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1]

        

        Hist√≥rico da Conversa: 
        {full_conversation}


        Aten√ß√£o retorne apenas a lista nenhuma informa√ß√£o a mais.
      """

      contexto.append({"role": "user", "content": prompt})

      response = self.openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=contexto
      )

      print(response.choices[0].message.get("content", ""))
      return self.extrair_lista(response.choices[0].message.get("content", ""))

    except Exception as e:
      print(e)

